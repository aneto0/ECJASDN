+EPICS_CA = {
    Class = EPICS::EPICSCAClient
    StackSize = 1048576
    CPUs = 0x1
    AutoStart = 0
    +PV_STATUS = {
        Class = EPICS::EPICSPV
        PVName = "EC-GN-P01-GPF-RTC:STATUS"
        PVType = uint32
    }
    +PV_COMMAND = {
        Class = EPICS::EPICSPV
        PVName = "EC-GN-P01-GPF-RTC:CMD"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"0", "GOTOIDLE"}}
        }
   	}
    +PV_ERROR = {
        Class = EPICS::EPICSPV
        PVName = "EC-GN-P01-GPF-RTC:ERROR"
        PVType = uint32
    }
    +PV_ERROR_RST = {
        Class = EPICS::EPICSPV
        PVName = "EC-GN-P01-GPF-RTC:ERROR-RST"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Ignore
            Function = "RESET"
        }
	}
}
/*+LoggerService = {
	Class = LoggerService
	CPUs = 0x1
	StackSize = 32768 
	NumberOfLogPages = 128 
	+ConLogger = {
		Class = ConsoleLogger
		Format = "EtOoFmC"
		PrintKeys = 1
	}
	+SysLogger = {
		Class = SysLogger
		Format = "EtOoFmC"
		PrintKeys = 1
		Ident = "SCU"
	}
}*/
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0
            +StartCAClient = {
                Class = Message
                Destination = "EPICS_CA"
                Function = "Start"
                Mode = ExpectsReply
            }
            +ChangeToIdleMsg = {
                Class = Message
                Destination = SCUApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = SCUApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = SCUApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = SCUApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = SCUApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICS_CA.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            } 
            +SetErrorPV = {
                Class = Message
                Destination = "EPICS_CA.PV_ERROR"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            } 
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = SCUApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +ResetErrorPV = {
                Class = Message
                Destination = "EPICS_CA.PV_ERROR"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = SCUApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = SCUApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetErrorStatusPV = {
                Class = Message
                Destination = "EPICS_CA.PV_ERROR"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            } 
        }
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }
}
$SCUApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMSDNSubCommands = {
            Class = IOGAM
            InputSignals = {
                ESDNTime = {
                    DataSource = SDNSubCommands
                    Type = uint32
                    Frequency = 1000
                }
                CycleTimeIdleThread1kHz = {
                     DataSource = "Timings"
                     Alias = "Idle.ThreadCommands_CycleTime"
                     Type = uint32
                }
 
            }
            OutputSignals = {
                ESDNTime = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTime = {
                     DataSource = "FileWriterStatistics"
		     Trigger = 1
                     Type = uint32
                }
 
            }
        }
        +GAMSDNSubWaveforms = {
            Class = IOGAM
            InputSignals = {
                WaveformID = {
                    DataSource = SDNSubWaveforms
                    Type = uint16
                    Frequency = 100
                }
            }
            OutputSignals = {
                WaveformID = {
                    DataSource = RealTimeThreadAsyncBridge
                    Type = uint16
                }
            }
        }
        +GAMSDNPubReply = {
            Class = IOGAM
            InputSignals = {
                ESDNTime = {
                    DataSource = DDB1
                    Type = uint32
                }
                WaveformID = {
                    DataSource = RealTimeThreadAsyncBridge
                    Type = uint16
                }
            }
            OutputSignals = {
                ESDNTime = {
                    DataSource = SDNPubReply
                    Type = uint32
                }
                ReplyWaveformAck = {
                    DataSource = SDNPubReply
                    Type = uint16
                    Trigger = 1
                }
            }
        }
        +GAMIdleCTStatistics = {
            Class = StatisticsGAM
            WindowSize = 1000
            InputSignals = {
                CycleTimeIdleThreadCommands = {
                     DataSource = "Timings"
                     Alias = "Idle.Thread1_CycleTime"
                     Type = uint32
                }
            }
            OutputSignals = {
                CycleTimeIdleThreadCommandsAvg = {
                    DataSource = "DDB1"
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsStd = {
                    DataSource = "DDB1" 
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsMin = {
                    DataSource = "DDB1"
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsMax = {
                    DataSource = "DDB1"
                    Type = uint32
                }
            }
        }
        +GAMThreadSynchOut = {
            Class = IOGAM
            InputSignals = {
                CycleTimeIdleThreadCommandsAvg = {
                    DataSource = "DDB1"
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsStd = {
                    DataSource = "DDB1" 
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsMin = {
                    DataSource = "DDB1"
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsMax = {
                    DataSource = "DDB1"
                    Type = uint32
                }
            }
            OutputSignals = {
                CycleTimeIdleThreadCommandsAvg = {
                    DataSource = "RTThreadSynch"
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsStd = {
                    DataSource = "RTThreadSynch" 
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsMin = {
                    DataSource = "RTThreadSynch"
                    Type = uint32
                }
                CycleTimeIdleThreadCommandsMax = {
                    DataSource = "RTThreadSynch"
                    Type = uint32
                    Trigger = 1
                }
            }
        }
        /*+GAMThreadSynchIn = {
            Class = IOGAM
            InputSignals = {
                CycleTimeIdleThreadCommandsAvg = {
                    DataSource = "RTThreadSynch"
                    Type = uint32
                    Frequency = 1
                    Samples = 1000
                }
                CycleTimeIdleThreadCommandsStd = {
                    DataSource = "RTThreadSynch" 
                    Type = uint32
                    Samples = 1000
                }
                CycleTimeIdleThreadCommandsMin = {
                    DataSource = "RTThreadSynch"
                    Type = uint32
                    Samples = 1000
                }
                CycleTimeIdleThreadCommandsMax = {
                    DataSource = "RTThreadSynch"
                    Type = uint32
                    Samples = 1000
                }
            }
            OutputSignals = {
                CycleTimeIdleThreadCommandsAvgArr = {
                    DataSource = "DDB1"
                    Type = uint32
                    NumberOfElements = 1000
                }
                CycleTimeIdleThreadCommandsStdArr = {
                    DataSource = "DDB1" 
                    Type = uint32
                    NumberOfElements = 1000
                }
                CycleTimeIdleThreadCommandsMinArr = {
                    DataSource = "DDB1"
                    Type = uint32
                    NumberOfElements = 1000
                }
                CycleTimeIdleThreadCommandsMaxArr = {
                    DataSource = "DDB1"
                    Type = uint32
                    NumberOfElements = 1000
                    Trigger = 1
                }
            }
        }
        +GAMEPICSCAOut = {
            Class = IOGAM
            InputSignals = {
                CycleTimeIdleThreadCommandsAvgArr = {
                    DataSource = "DDB1"
                    Type = uint32
                    NumberOfElements = 1000
                    Ranges = {{999 999}}
                }
                CycleTimeIdleThreadCommandsMaxArr = {
                    DataSource = "DDB1"
                    Type = uint32
                    NumberOfElements = 1000
                    Ranges = {{999 999}}
                }
            }
            OutputSignals = {
                CycleTimeIdleThreadCommandsAvg = {
                    DataSource = "EPICSCAOut"
                    Type = uint32
                    NumberOfElements = 1
                    Trigger = 1
                }
                CycleTimeIdleThreadCommandsMax = {
                    DataSource = "EPICSCAOut"
                    Type = uint32
                    NumberOfElements = 1
                    Trigger = 1
                }
            }
        }*/
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +SDNSubCommands = {
            Class = SDN::SDNSubscriber
            Topic = ECPC2SCURU
            Interface = eth5
            CPUs = 0x8
            Locked = 1
            Signals = {
                Header = {
                     Type = uint8
                     NumberOfElements = 48
                }
                ESDNHeaderVersionId = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNHeaderSize = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNStatus = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNDoNotUse = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNTime = {
                    Type = uint32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Command = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 64
                }
            }
        }
        +SDNSubWaveforms = {
            Class = SDN::SDNSubscriber
            Topic = ECPC2SCURUWF
            Interface = eth5
            CPUs = 0x8
            Locked = 1
            Signals = {
                Header = {
                     Type = uint8
                     NumberOfElements = 48
                }
                ESDNHeaderVersionId = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNHeaderSize = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNStatus = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNDoNotUse = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNTime = {
                    Type = uint32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                WaveformID = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1CorrectionCoilsCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron1FilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1SCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron1BPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1APSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2CorrectionCoilsCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron2FilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2SCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron2BPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2APSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
            }
        }
        +SDNPubReply = {
            Class = SDN::SDNPublisher
            Topic = SCURU2ECPC
            Interface = eth5
            Locked = 1
            Signals = {
                Header = {
                     Type = uint8
                     NumberOfElements = 48
                }
                ESDNHeaderVersionId = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNHeaderSize = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNStatus = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNDoNotUse = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNTime = {
                    Type = uint32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ReplyStatus = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ReplyWaveformAck = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusOverall = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusMagnets = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusFilament = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusHVPS = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusAuxiliaries = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1AlarmCutoff  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1AlarmArcs  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1AlarmOvercurrent  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageVacuum  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageCollector = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageCooling = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageCathode = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusOverall = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusMagnets = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusFilament = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusHVPS = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusAuxiliaries = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2AlarmCutoff  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2AlarmArcs  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2AlarmOvercurrent  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageVacuum  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageCollector = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageCooling = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageCathode = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsPowerEstimation = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsPowerConsumption = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsMVPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsBPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsAPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsFilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsSCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron1MeasurementsCollectorSweepingCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron1MeasurementsMVPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsBPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsAPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsFilamentVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsPowerEstimation = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsPowerConsumption = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsMVPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsBPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsAPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsFilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsSCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron2MeasurementsCollectorSweepingCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron2MeasurementsMVPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsBPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsAPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsFilamentVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
               }
            }
        }
        /*+EPICSCAOut = {
            Class = "EPICSCA::EPICSCAOutput"
            CPUs = "1"
            StackSize = "10000000"
            IgnoreBufferOverrun = 1
            NumberOfBuffers = 10
            Signals = {
                CycleTimeIdleThreadCommandsAvg = {
                    PVName = "EC-GN-P01-GPF-RTC:CT-IDLE-THRC-AVG"
                }
                CycleTimeIdleThreadCommandsMax = {
                    PVName = "EC-GN-P01-GPF-RTC:CT-IDLE-THRC-MAX"
                }
            }
        }*/
        +RTThreadSynch = {
            Class = "RealTimeThreadSynchronisation"
            Timeout = 2000
        }
        +RealTimeThreadAsyncBridge = {
            Class = RealTimeThreadAsyncBridge
        }
        +FileWriterStatistics = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 100000 //Compulsory. Number of buffers in the circular buffer defined above. Each buffer is capable of holding a copy of all the DataSourceI signals.
            CPUMask = 1 //Compulsory. Affinity assigned to the threads responsible for asynchronously flush data into the file.
            StackSize = 10000000 //Compulsory. Stack size of the thread above.
            Filename = "/tmp/statistics.csv" //Optional. If not set the filename shall be set using the OpenFile RPC.
            Overwrite = "yes" //Compulsory. If "yes" the file will be overwritten, otherwise new data will be added to the end of the existent file.
            FileFormat = "csv" //Compulsory. Possible values are: binary and csv.
            CSVSeparator = "," //Compulsory if Format=csv. Sets the file separator type.
            StoreOnTrigger =0 
            Signals = {
                CycleTime = {
                    Type = uint32
                }                     
            }      
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +ThreadCommands = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMSDNSubCommands GAMSDNPubReply GAMIdleCTStatistics GAMThreadSynchOut}
                }
                +ThreadWaveform = {
                    Class = RealTimeThread
                    CPUs = 0x2
                    Functions = {GAMSDNSubWaveforms}
                }
                /*+ThreadLog = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {GAMThreadSynchIn GAMEPICSCAOut}
                }*/
            }
        }        
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x2
                    Functions = {GAMSDNSubCommands GAMSDNPubReply GAMIdleCTStatistics GAMThreadSynchOut}
                }
                +ThreadWaveform = {
                    Class = RealTimeThread
                    CPUs = 0x2
                    Functions = {GAMSDNSubWaveforms}
                }
                /*+ThreadLog = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {GAMThreadSynchIn GAMEPICSCAOut}
                }*/
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}

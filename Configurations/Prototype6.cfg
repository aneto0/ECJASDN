
/* my test app*/
+StateMachine = {
	Class = StateMachine
	+INITIAL = {
		Class = ReferenceContainer
		+Start = {
			Class = StateMachineEvent
			NextState = "WAITSTANDBY"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = WaitStandby
        		}
        	}
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
	}
	+WAITSTANDBY = {
		Class = ReferenceContainer
		/* GoOffline is one of command to be executed.*/
		+GoOffline = {
			Class = StateMachineEvent
			NextState = "OFFLINE"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Offline
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
            +PreProgrammedGAMLoadFile = {
                Class = Message
        		Destination = MyApp.Functions.PreProgrammedGAM
        		Function = LoadFile
        		Mode = ExpectsReply
            }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }
		}
		+GoError = {  /* This is a line to receive event from RT Application */
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }
		}
	}
	
	+OFFLINE = {
		Class = ReferenceContainer
		/* GoOffline is one of command to be executed.*/
		+GoWaitPermit = {
			Class = StateMachineEvent
			NextState = "WAITPERMIT"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = WaitPermit
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }
		}
		+GoError = {  /* This is a line to receive event from RT Application */
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }
		}
	}
	
	+WAITPERMIT = {
		Class = ReferenceContainer
		+GoPreHeating = {
			Class = StateMachineEvent
			NextState = "PREHEATING"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = PreHeating
        		}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply			
			}
            +PreProgrammedGAMSetModeHeating = {
                Class = Message
        		Destination = MyApp.Functions.PreProgrammedGAM
        		Function = SetMode
        		Mode = ExpectsReply
                +Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Heating
        		}
            }
			+StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply			
			}
		}
        +GoWaitReady = {
			Class = StateMachineEvent
			NextState = "WAITREADY"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = WaitReady
        		}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply			
			}
			+StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply			
			}
		}
		+GoError = {
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
	}
	
	+PREHEATING = {
		Class = ReferenceContainer
		+GoWaitReady = {
			Class = StateMachineEvent
			NextState = "WAITREADY"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = WaitReady
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }
		}
		+GoError = {  /* This is a line to receive event from RT Application */
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }
		}
	}
	
	+WAITREADY = {
		Class = ReferenceContainer
		+GoWaitHVON = {
			Class = StateMachineEvent
			NextState = "WAITHVON"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = HVON
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
		+GoError= {
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
		
	}
	+WAITHVON = {
		Class = ReferenceContainer
		+GoHVArming = {
			Class = StateMachineEvent
			NextState = "HVARMING"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = HVArming
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }	
		}
		+GoError = {
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
		
	}
	+HVARMING = {
		Class = ReferenceContainer
		+GoHVArmed = {
			Class = StateMachineEvent
			NextState = "HVARMED"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = HVArmed
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }			
		}
		+GoError = {
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
	}
	+HVARMED = {
		Class = ReferenceContainer
		+GoHVInjectionBPS = {
			Class = StateMachineEvent
			NextState = "HVINJECTION"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = HVInjectionBPS
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }				
		}
        +GoHVInjectionMHVPS = {
			Class = StateMachineEvent
			NextState = "HVINJECTION"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = HVInjectionMHVPS
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }				
		}

		+GoOffline = {
			Class = StateMachineEvent
			NextState = "OFFLINE"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Offline
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }			
		}
		+GoError = {
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
	}
	+HVINJECTION = {
		Class = ReferenceContainer
		+GoRFON = {
			Class = StateMachineEvent
			NextState = "RFON"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = RFON
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }			
		}
		+GoError = {
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
	}
	+RFON = {
		Class = ReferenceContainer
		+GoHVArmed = {
			Class = StateMachineEvent
			NextState = "HVARMED"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = HVArmed
        		}
        	}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }			
		}
		+GoError = {
			Class = StateMachineEvent
			NextState = "ERROR"
			NextStateError = "ERROR"
			+PrepareNextStateOnOurRTApp = { /*This code is executed in SM*/
				Class = Message
				Destination = MyApp
				Mode = ExpectsReply
				Function = PrepareNextState
				+Parameters = {
					Class = ConfigurationDatabase
					param1 = Error
				}
			}
			+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }		
		}
	}

	
	/*
	*   Whenever PS emits fault signal, the state machine enter the error state.
	*/
	+ERROR = {
		Class = ReferenceContainer
		/*Messages sent when entering the state*/
		+ENTER = {
            Class = ReferenceContainer
            +APSStop = {
        		Class = Message
        		Destination = MyApp.Functions.StopPSGAM
        		Function = SetOutput
        		Mode = ExpectsReply
        		+Parameters = {
					Class = ConfigurationDatabase
					SignalIndex = 0 
					SignalValue = 1
				}
        	}
        	+BPSStop = {
        		Class = Message
        		Destination = MyApp.Functions.StopPSGAM
        		Function = SetOutput
        		Mode = ExpectsReply
        		+Parameters = {
					Class = ConfigurationDatabase
					SignalIndex = 1 
					SignalValue = 1
				}
        	}
        }
		/* GoOffline is one of command to be executed.*/
		+GoReset = {
			Class = StateMachineEvent
			NextState = "WAITSTANDBY"
			NextStateError = "ERROR"
            +PrepareNextStateOnOurRTApp = {
        		Class = Message
        		Destination = MyApp
        		Mode = ExpectsReply
        		/* The following function is executed in RT app.*/
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = WaitStandby
        		}
        		
        	}
        	+StopCurrentStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
	        }
	        +StartNextStateExecution = {
        		Class = Message
        		Destination = MyApp 
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
	        }
		}
		
	}	
}	

+MyApp = {
	Class = RealTimeApplication
	+Functions = {
	    Class = ReferenceContainer
	    /*Nodes under the Function node is GAMs configuration to be executed in RTApp thread.*/
	    +TimerGAM = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                    Frequency = 1  /* Hz */
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = Display
                    Type = int32
                }
            }
        }
        
        +PreProgrammedGAM = {
        	Class = JAPreProgrammedGAM
            Directory = "/tmp"
        	InputSignals = {
                /*Monitor PrePro ON/OFF, File load trigger, File name*/
                GYACSVNAME = {
                    DataSource = EPICSCAInput
                }
        	}
        	OutputSignals = {
                /*Write File Load State.*/
                PREPROGTIME = {
                    DataSource = DDB1
                    Type = int32
                }
                GYABPSREF = {
                    DataSource = DDB1
                    Type = float32
                }
                GYAPPSREF = {
                    DataSource = DDB1
                    Type = float32
                }
                GYAFHPSREF = {
                    DataSource = DDB1
                    Type = float32
                }
                GYACCPSREF = {
                    DataSource = DDB1
                    Type = float32
                }
                GYAMCPSREF = {
                    DataSource = DDB1
                    Type = float32
                }
                GYAGCPSREF = {
                    DataSource = DDB1
                    Type = float32
                }
        	}
        }
        
        +WaitStandbyMessageGAM = {
            Class = JAMessageGAM /*JAMessageGAM will be developed.*/
            InputSignals = {
                Standby = { /* Signal name*/
                    DataSource = EPICSCAInput
                    Type = uint32
                }
                
            }
            /* following message is sent when signal state (standby) becomes 1.*/
            +Event = {
        		Class = Message
        		Destination = StateMachine 
        		Function = GoOffline  /* The GoOffline event in State Machine is called.*/
        		Mode = ExpectsReply
	        }
        }
        +OfflineMessageGAM = {
            Class = JAMessageGAM 
            Operation = AND
            InputSignals = {
                GYAMCPSREADY = { /* Signal name*/
                    DataSource = EPICSCAInput
                    Type = uint32
                }
                GYAGCPSREADY = { /* Signal name*/
                    DataSource = EPICSCAInput
                    Type = uint32
                }
                
            }
            /* following message is sent when signal state (standby) becomes 1.*/
            +Event = {
        		Class = Message
        		Destination = StateMachine 
        		Function = GoWaitPermit
        		Mode = ExpectsReply
	        }
        }
        +WaitPermitMessageGAMToWaitReady = {
        	Class = JAMessageGAM
            Operation = AND
        	InputSignals = {
        		BEAMONPERMIT = { 
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoWaitReady
        		Mode = ExpectsReply
        	}
        }
        +WaitPermitMessageGAMToPreHeating = {
        	Class = JAMessageGAM
            Operation = AND
        	InputSignals = {
        		BEAMONPERMIT = { 
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
                GYAPREPRO = { 
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoPreHeating
        		Mode = ExpectsReply
        	}
        }

        +PreHeatingMessageGAM = {
        /* If prepro mode is ON, then, execute periodical parameter update.
        *  Otherwise just pass through states
        */
        	Class = JAMessageGAM
            Operation = VALUE
            ValueToCheck = 0
        	InputSignals = {
        		PREPROGTIME = { 
        			DataSource = DDB1 
        			Type = int32
        		}
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoWaitReady
        		Mode = ExpectsReply
        	}
        }
        +WaitReadyMessageGAM = {
        	Class = JAMessageGAM
        	InputSignals = {
        		GYAAPSREADY = { 
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        		GYABPSREADY = { 
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoWaitHVON
        		Mode = ExpectsReply
        	}
        }
        +WaitHVONMessageGAM = {
        	Class = JAMessageGAM
        	InputSignals = {
        		HVON = { 
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoHVArming
        		Mode = ExpectsReply
        	}
        }
        +HVArmingMessageGAM = {
        	Class = JAMessageGAM
            Operation = AND
        	InputSignals = {
        		GYAAPSHVON = { 
        			DataSource = DDB1
        			Type = uint32
        		}
        		GYABPSHVON = {
        			DataSource = DDB1
        			Type = uint32
        		}
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoHVArmed
        		Mode = ExpectsReply
        	}
        }
        +HVArmingCountdownGAM1 = {
        	Class = JACountdownGAM
            OutputValue = 1
            Step = 10
            InputSignals = {
                GYAAPSHVDT = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +HVArmingCountdownGAM2 = {
        	Class = JACountdownGAM
            OutputValue = 1
            Step = 10
            InputSignals = {
                GYABPSHVDT = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +HVArmedCountdownGAM1 = {
        	Class = JACountdownGAM
            OutputValue = 1
            Step = 10
            InputSignals = {
                GYABPSSWDT = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +HVArmedCountdownGAM2 = {
        	Class = JACountdownGAM
            OutputValue = 1
            Step = 10
            InputSignals = {
                MHVPSDT = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                MHVPSON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +HVArmedMessageGAM1 = {
        	Class = JAMessageGAM
        	InputSignals = {
                GYABPSSWON = {
                    DataSource = DDB1 
                    Type = uint32
                }
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoHVInjectionBPS
        		Mode = ExpectsReply
        	}
        }
        +HVArmedMessageGAM2 = {
        	Class = JAMessageGAM
        	InputSignals = {
                MHVPSON = {
                    DataSource = DDB1
                    Type = uint32
                }
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoHVInjectionMHVPS
        		Mode = ExpectsReply
        	}
        }

        +HVInjectionMHVPSCountdownGAM = {
            Class = JACountdownGAM
            OutputValue = 1
            Step = 10
            InputSignals = {
                MHVPSDT = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                MHVPSON = {
                    DataSource = DDB1
                }
            }
        }
        +HVInjectionAPSCountdownGAM = {
            Class = JACountdownGAM
            OutputValue = 1
            Step = 10
            InputSignals = {
                GYAAPSSWDT = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                GYAAPSSWON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +HVInjectionBPSCountdownGAM = {
            Class = JACountdownGAM
            OutputValue = 1
            Step = 10
            InputSignals = {
                GYABPSSWDT = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }

        +HVInjectionMessageGAM = {
        	Class = JAMessageGAM
            Operation = AND
        	InputSignals = {
        		GYAPSSWON = { 
        			DataSource = DDB1 
        			Type = uint32
        		}
        		GYABPSSWON = {
         			DataSource = DDB1
        			Type = uint32       			
        		}  
        		MHVPSON = {
        			DataSource = DDB1
        			Type = uint32        		
        		}      	
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoRFON
        		Mode = ExpectsReply
        	}
        }
        +RFONCountdownGAM1 = {
            Class = JACountdownGAM
            OutputValue = 0
            Step = 10
            InputSignals = {
                GYASHOTLEN = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                GYAAPSSWON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +RFONCountdownGAM2 = {
            Class = JACountdownGAM
            OutputValue = 0
            Step = 10
            InputSignals = {
                GYASHOTLEN = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +RFONCountdownGAM3 = {
            Class = JACountdownGAM
            OutputValue = 0
            Step = 10
            InputSignals = {
                GYASHOTLEN = {
                    DataSource = EPICSCAInput
                    Type = uint32
                }
            }
            OutputSignals = {
                MHVPSON = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +RFONMessageGAM = {
        	Class = JAMessageGAM  /* This base class may need updated.*/
            Operation = NOR
        	InputSignals = {
        		MHVPSON = { 
        			DataSource = DDB1
        			Type = uint32
        		}
                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        		}
        		GYABPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        		}
        	}
        	+Event = {
        	    Class = Message
        		Destination = StateMachine
        		Function = GoHVArmed
        		Mode = ExpectsReply
        	}
        }
        
        
/*
*  ErrorDetectorGAM gathers all hardware fault signal through EPICS PVs.
*/
        +ErrorDetectGAM = {
        	Class = JAMessageGAM
        	Operation = OR
        	InputSignals = {
        		Error1 = {/*APS error signal */
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        		Error2 = {/*BPS error signal*/
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        	}
        	/*When any device emit error, sm go to error state*/
        	+Event = {
        		Class = Message
        		Destination = StateMachine
        		Function = GoError /*State machine needs to receive GoError Event*/
        		Mode = ExpectsReply        	
        	}
        }
        +StopPSGAM = {
        	Class = ConstantGAM
        	OutputSignals = {
        		APSStop = {
        			DataSource = "DDB1"
        			Type = uint32
        			Default = 0
        		}
        		BPSStop = {
        		    DataSource = "DDB1"
        			Type = uint32
        			Default = 0
        		}
        	}
        }
        +ResetErrorGAM = {
        	Class = JAMessageGAM
        	InputSignals = {
        		ResetError = {/*Detect reset command*/
        			DataSource = EPICSCAInput
        			Type = uint32
        		}
        	}
        	/*When any device emit error, sm go to error state*/
        	+Event = {
        		Class = Message
        		Destination = StateMachine
        		Function = GoReset /*State machine needs to receive GoError Event*/
        		Mode = ExpectsReply        	
        	}        
        }
        +PreHeatingInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
        			Default = 0
                }
        		MHVPSON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
        		}
                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
            }
        }
        +WaitReadyInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
        			Default = 0
                }
        		MHVPSON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
        		}
                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
            }
        }
        +WaitHVONInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
        			Default = 0
                }
        		MHVPSON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
        		}
                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
            }
        }
        +HVArmedInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
            }
        }
        +HVInjectionBPSInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
        			Default = 0
                }
                GYAPSSWON = {
                    DataSource = DDB1
                    Type = uint32
        			Default = 0
                }

            }
        }
        +HVInjectionMHVPSInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                MHVPSON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYAPSSWON = {
                    DataSource = DDB1
                    Type = uint32
        			Default = 0
                }

            }
        }
        +RFONInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
            }
        }
        +HVArmingInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                APSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                BPSStop = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
                GYABPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
                MHVPSON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

            }
        }

        +ErrorInitialValueGAM = {
            Class = ConstantGAM
            OutputSignals = {
                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }
                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
                GYABPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
        			Default = 0
                }
                MHVPSON = {
                    DataSource = DDB1
                    Type = uint32
                    Default = 0
                }

            }
        }

        +EPICSOutputGAM = {
            Class = IOGAM
            InputSignals = {
                GYAAPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                }
                GYABPSHVON = {
                    DataSource = DDB1
                    Type = uint32
                }
                APSStop = {
        			DataSource = DDB1
        			Type = uint32
        			Default = 0
        		}
        		BPSStop = {
        		    DataSource = DDB1
        			Type = uint32
        			Default = 0
        		}
                GYABPSSWON = {
                    DataSource = DDB1
                    Type = uint32
                }
        		MHVPSON = {
        			DataSource = DDB1 
        			Type = uint32
        		}
                GYAAPSSWON = {
        			DataSource = DDB1 
        			Type = uint32
                }
            }
            OutputSignals = {
                GYAAPSHVON = {
                    DataSource = EPICSCAOutput
                    Type = uint32
                }
                GYABPSHVON = {
                    DataSource = EPICSCAOutput
                    Type = uint32
                }
                APSStop = {
        			DataSource = "EPICSCAOutput"
        			Type = uint32
        		}
        		BPSStop = {
        		    DataSource = "EPICSCAOutput"
        			Type = uint32
        		}
                GYABPSSWON = {
                    DataSource = EPICSCAOutput
                    Type = uint32
                }
        		MHVPSON = {
        			DataSource = EPICSCAOutput
        			Type = uint32
        		}
                GYAAPSSWON = {
        			DataSource = EPICSCAOutput
        			Type = uint32
                }

            } 
        }
	}
	
	/* Data node is mandatory*/
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1 
        +DDB1 = {
            Class = GAMDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            SleepPercentage = 30
            ExecutionMode = RealTimeThread
            CPUMask = 0x1
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +EPICSCAInput = {
            Class = "EPICSCA::EPICSCAInput"
            CPUMask = "2" /* run on CPU 3 <-- 0100 */
            StackSize = "10000000"
            Signals = {
            
/*
*  PV from signal-variable tab
*/
                GYAAPSREADY = {
                    PVName = "TODO"
                }
                GYABPSREADY = {
                    PVName = "TODO"
                }
                Standby = {
                    PVName = "EC-GN-P01-GPF:PLC4110-YTS-ST1R"
                }
                GYAMCPSREADY = {
                    PVName = "EC-GN-P01-GBF-MCPS:PSU2120-ACT-RB"
                }
                GYAGCPSREADY = {
                    PVName = "EC-GN-P01-GAF-GCPS:PSU2130-ACT-RB"
                }
                Error1 = {
                	PVName = "EC-GN-P01-PA1F:PSU3000-YFLT"
                }
                Error2 = {
                	PVName = "EC-GN-P01-PB1F:PSU1000-YFLT"
                }
				
				BEAMONPERMIT = {
					PVName = "EC-GN-P01-GAF:PLC4110-CON-GY1PRM"
				}
				
				HVON = {
					PVName = "EC-GN-P01-GPF:PLC4110-YTS-ST3R"
				}
				
/*
*  PV from operation parameter tab
*/	        	
	        	MHVPSDT = {
				    PVName = "EC-GN-P01-PMF:STAT-DT-HVON"
                    Type = uint32
				}
				GYAAPSHVDT = {
					PVName = "EC-GN-P01-PA1F:STAT-DT-HVON"
                    Type = uint32
				}
				GYAAPSSWDT = {	
					PVName = "EC-GN-P01-PA1F:STAT-DT-SWON"
                    Type = uint32
				}
				GYABPSHVDT = {
					PVName = "EC-GN-P01-PB1F:STAT-DT-HVON"
                    Type = uint32
				}
				GYABPSSWDT = {			
					PVName = "EC-GN-P01-PB1F:STAT-DT-SWON"
                    Type = uint32
				}			
				GYBAPSHVDT = {
					PVName = "EC-GN-P01-PA2F:STAT-DT-HVON"
                    Type = uint32
				}
				GYBAPSSWDT = {
					PVName = "EC-GN-P01-PA2F:STAT-DT-SWON"
                    Type = uint32
				}
				GYBBPSHVDT = {
					PVName = "EC-GN-P01-PB2F:STAT-DT-HVON"
                    Type = uint32
				}
				GYBSWONDT = {
					PVName = "EC-GN-P01-PB2F:STAT-DT-SWON"
                    Type = uint32
				}
				GYASHOTLEN = {
					PVName = "EC-GN-P01-GAF:STAT-DT-SHOTLEN"
                    Type = uint32
				}
				GYBSHOTLEN = {
					PVName = "EC-GN-P01-GBF:STAT-DT-SHOTLEN"
                    Type = uint32
				}
				RDYTOUT = {
					PVName = "EC-GN-P01-GPF:STAT-RDY-TOUT"
                    Type = uint32
				}
				MHVPSMANM = {
					PVName = "EC-GN-P01-PMF:STAT-MANM"
                    Type = uint32
				}
				GYAAPSMANM = {
					PVName = "EC-GN-P01-PA1F:STAT-MANM"
                    Type = uint32
				}
				GYABPSMANM = {
					PVName = "EC-GN-P01-PB1F:STAT-MANM"
                    Type = uint32
				}
				GYBAPSMANM = {
					PVName = "EC-GN-P01-PA2F:STAT-MANM"
                    Type = uint32
				}
				GYBBPSMANM = {
					PVName = "EC-GN-P01-PB2F:STAT-MANM"
                    Type = uint32
				}
				GYAMCPSMANM = {
					PVName = "EC-GN-P01-GAF-MCPS:STAT-MANM"
                    Type = uint32
				}
				GYAGCPSMANM = {
					PVName = "EC-GN-P01-GAF-GCPS:STAT-MANM"
                    Type = uint32
				}
				GYAFHPSMANM = {			
					PVName = "EC-GN-P01-GAF-FHPS:STAT-MANM"
                    Type = uint32
				}
				GYACCPSMANM = {
					PVName = "EC-GN-P01-GAF-CCPS:STAT-MANM"
                    Type = uint32
				}
				GYBMCPSMANM = {
					PVName = "EC-GN-P01-GBF-MCPS:STAT-MANM"
                    Type = uint32
				}
				GYBGCPSMANM = {
					PVName = "EC-GN-P01-GBF-GCPS:STAT-MANM"
                    Type = uint32
				}
				GYBFHPSMANM = {
                    PVName = "EC-GN-P01-GBF-FHPS:STAT-MANM"
                    Type = uint32
				}
				GYBCCPS = {
					PVName = "EC-GN-P01-GBF-CCPS:STAT-MANM"
                    Type = uint32
				}
				GYATRGSOUR = {
					PVName = "EC-GN-P01-GAF:STAT-TRIG-SOUR"
                    Type = uint32
				}
				GYBTRGSOUR = {
					PVName = "EC-GN-P01-GBF:STAT-TRIG-SOUR"
                    Type = uint32
				}
				GYASIMMODE = {			
					PVName = "EC-GN-P01-GAF:STAT-SIMM-MODE"
                    Type = uint32
				}
				GYBSIMMODE = {
					PVName = "EC-GN-P01-GBF:STAT-SIMM-MODE"
                    Type = uint32
				}
				GYAPREPRO = {
					PVName = "EC-GN-P01-GAF:STAT-PREP-MODE"
                    Type = uint32
				}
				GYBPREPRO = {
					PVName = "EC-GN-P01-GBF:STAT-PREP-MODE"
                    Type = uint32
				}
				GYAMSTTRIG = {
					PVName = "EC-GN-P01-GAF:STAT-MST-TRIG"
                    Type = uint32
				}
				GYBMSTTRIG = {
					PVName = "EC-GN-P01-GBF:STAT-MST-TRIG"
                    Type = uint32
				}
                ResetError = {
	        		PVName = "EC-GN-P01-GPF:STAT-RST-FLT"
                    Type = uint32
	        	}
				GYASHOTID = {			
					PVName = "EC-GN-P01-GAF:STAT-SHOT-ID"
                    Type = uint32
				}
				GYBSHOTID = {
					PVName = "EC-GN-P01-GBF:STAT-SHOT-ID"
                    Type = uint32
				}
				GYAAPSPOL = {
					PVName = "EC-GN-P01-PA1F:STAT-POLSW"
                    Type = uint32
				}
				GYBAPSPOL = {
					PVName = "EC-GN-P01-PA2F:STAT-POLSW"
                    Type = uint32
				}
				GYACSVLOAD = {
					PVName = "EC-GN-P01-GAF:STAT-CSV-LOAD"
                    Type = uint32
				}
				GYACSVNAME = {
					PVName = "EC-GN-P01-GAF:STAT-CSV-NAME"
                    Type = string
				}
				GYBCSVLOAD = {
					PVName = "EC-GN-P01-GBF:STAT-CSV-LOAD"
                    Type = uint32
				}
				GYBCSVNAME = {
					PVName = "EC-GN-P01-GBF:STAT-CSV-NAME"
                    Type = string
				}

            }
        }
        +EPICSCAOutput = {
        	Class = "EPICSCA::EPICSCAOutput"
        	CPUMask = "2"
        	StackSize = "10000000"
        	NumberOfBuffers = 2
        	Signals = {
	        	APSStop = {
	        		PVName = "EC-GN-P01-PA1F:PSU3000-CTRP"
	        	}
	        	BPSStop = {
	        		PVName = "EC-GN-P01-PB1F:PSU1000-CTRP"
	        	}
	        	
				GYASUBSTAT = {
					PVName = "EC-GN-P01-GAF:STAT-FC-SUBSTATE"
                    Type = uint32
				}
				GYBSUBSTAT = {
					PVName = "EC-GN-P01-GBF:STAT-FC-SUBSTATE"
                    Type = uint32
				}
				GYACSVLOADED = {
					PVName = "EC-GN-P01-GAF:STAT-CSV-LOADED"
                    Type = uint32
				}	
				GYACSVERROR = {
					PVName = "EC-GN-P01-GAF:STAT-CSV-ERR"
                    Type = uint32
				}	
				GYBCSVLOADED = {
					PVName = "EC-GN-P01-GBF:STAT-CSV-LOADED"
                    Type = uint32
				}
				GYBCSVERROR = {
					PVName = "EC-GN-P01-GBF:STAT-CSV-ERR"
                    Type = uint32
	        	}
	        	
/*
*  PVs to Analog Output Signals
*/	        	
				GYAFHPSREF = {
					PVName = "EC-GN-P01-GAF-FHPS:PSU2320-EREF"
                    Type = uint32
				}
				GYACCPSREF = {
					PVName = "EC-GN-P01-GAF-CCPS:PSU2610-EREF"
                    Type = uint32
				}
				GYBFHPSREF = {
					PVName = "EC-GN-P01-GBF-FHPS:PSU2320-EREF"
                    Type = uint32
				}
				GYBCCPSREF = {
					PVName = "EC-GN-P01-GBF-CCPS:PSU2610-EREF"
                    Type = uint32
				}
				GYABPSREF = {
					PVName = "EC-GN-P01-PB1F:PSU1000-EREF"
                    Type = uint32
				}
				GYAAPS1REF = {	
					PVName = "EC-GN-P01-PA1F:PSU3000-EREF-P"
                    Type = uint32
				}
				GYAAPS2REF = {	
					PVName = "EC-GN-P01-PA1F:PSU3000-EREF-N"
                    Type = uint32
				}
				MHVPSREF = {	
					PVName = "EC-GN-P01-PMF:PSU0000-EREF"
                    Type = uint32
				}
				GYBBPSREF = {	
					PVName = "EC-GN-P01-PB2F:PSU2000-EREF"
                    Type = uint32
				}
				GYBAPS1REF = {	
					PVName = "EC-GN-P01-PA2F:PSU4000-EREF-P"
                    Type = uint32
				}
				GYBAPS2REF = {	
					PVName = "EC-GN-P01-PA2F:PSU4000-EREF-N"
                    Type = uint32
				}
                GYAMCPSREF = {
					PVName = "EC-GN-P01-GAF-MCPS:PSU2120-TRG-CURR-SET"
                    Type = uint32
                }
				GYAGCPSREF = {
					PVName = "EC-GN-P01-GAF-GCPS:PSU2130-TRG-CURR-SET"
                    Type = uint32
                }

/*
*  PVs to Digital Output Signals
*/
				GYAAPSHVON = {
					PVName = "EC-GN-P01-PA1F:PSU3000-CON-HV"
                    Type = uint32
				}
				GYAAPSSWON = {
					PVName = "EC-GN-P01-PA1F:PSU3000-CON-SW"
                    Type = uint32
				}
				GYAAPSSTOP = {
					PVName = "EC-GN-P01-PA1F:PSU3000-CTRP"
                    Type = uint32
				}
				GYABPSHVON = {
					PVName = "EC-GN-P01-PB1F:PSU1000-CON-HV"
                    Type = uint32
				}
				GYABPSSWON = {
					PVName = "EC-GN-P01-PB1F:PSU1000-CON-SW"
                    Type = uint32
				}
				BYABPSSTOP = {
					PVName = "EC-GN-P01-PB1F:PSU1000-CTRP"
                    Type = uint32
				}
				FCFAULT = {
					PVName = "EC-GN-P01-GAF:FMC4310-YSTA-GAOP"
                    Type = uint32
				}
				MHVPSON = {
					PVName = "EC-GN-P01-PMF:PSU0000-CON-SW"
                    Type = uint32
				}
				MHVPSSTOP = {
					PVName = "EC-GN-P01-PMF:PSU0000-COFF"
                    Type = uint32
				}
				MHVPSMODON = {	
					PVName = "EC-GN-P01-PMF:PSU0000-CON-MOD"
                    Type = uint32
				}
				PCFFAULT = {
					PVName = "EC-GN-P01-GAF:PCF4210-CTRP"
                    Type = uint32
				}
				GYAHVARMED = {
					PVName = "EC-GN-P01-GAF:PCF4210-YTS-GA1"
                    Type = uint32
				}
				GYAHVINJECTION = {	
					PVName = "EC-GN-P01-GAF:PCF4210-YTS-GA2"
                    Type = uint32
				}
				GYARFON = {
					PVName = "EC-GN-P01-GAF:PCF4210-YTS-GA3"
                    Type = uint32
				}
				GYAFHPSRUCMPLT = {
					PVName = "EC-GN-P01-GAF-FHPS:PSU2610-YTS-RUP"
                    Type = uint32
				}
				GYAMCPSRUCMPLT = {
					PVName = "EC-GN-P01-GAF-MCPS:PSU2120-YTS-RUP"
                    Type = uint32
				}
				GYAMCPSRFCMPLT = {	
					PVName = "EC-GN-P01-GAF-MCPS:PSU2120-YTS-RDOWN"
                    Type = uint32
				}
				GYACCPSINOPERATION = {
					PVName = "EC-GN-P01-GAF-CCPS:PSU2320-TR"
                    Type = uint32
				}
				GYBAPSHVON = {
					PVName = "EC-GN-P01-PA2F:PSU4000-CON-HV"
                    Type = uint32
				}
				GYBAPSSWON = {
					PVName = "EC-GN-P01-PA2F:PSU4000-CON-SW"
                    Type = uint32
				}
				GYBAPSSTOP = {
					PVName = "EC-GN-P01-PA2F:PSU4000-CTRP"
                    Type = uint32
				}
				GYBBPSHVON = {
					PVName = "EC-GN-P01-PB2F:PSU2000-CON-HV"
                    Type = uint32
				}
				GYBBPSSWON = {
					PVName = "EC-GN-P01-PB2F:PSU2000-CON-SW"
                    Type = uint32
				}
				GYBBPSSTOP = {
					PVName = "EC-GN-P01-PB2F:PSU2000-CTRP"
                    Type = uint32
				}
				GYBBEAMON = {
					PVName = "EC-GN-P01-GBF:FMS4310-YSTA-GBOP"
                    Type = uint32
				}
				GYBHVARMED = {
					PVName = "EC-GN-P01-GBF:PCF4210-YTS-GB1"
                    Type = uint32
				}
				GYBHVINJECTION = {
					PVName = "EC-GN-P01-GBF:PCF4210-YTS-GB2"
                    Type = uint32
				}
				GYBRFON = {
					PVName = "EC-GN-P01-GBF:PCF4210-YTS-GB3"
                    Type = uint32
				}
				GYBFHPSRUCMPLT = {
					PVName = "EC-GN-P01-GBF-FHPS:PSU2610-YTS-RUP"
                    Type = uint32
				}
				GYBMCPSRUCMPLT = {
					PVName = "EC-GN-P01-GBF-MCPS:PSU2120-YTS-RUP"
                    Type = uint32
				}
				GYBCCPSINOPERATION = {
					PVName = "EC-GN-P01-GBF-CCPS:PSU2320-TR"
                    Type = uint32
				}	
        	}
        }
		+SDNSubCommands = {
            Class = SDN::SDNSubscriber
            Topic = ECPC2SSCUJA
            Interface = lo
            CPUs = 0x2
            Locked = 1
            Signals = {
                Header = {
                     Type = uint8
                     NumberOfElements = 48
                }
                ESDNHeaderVersionId = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNHeaderSize = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNStatus = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNDoNotUse = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNTime = {
                    Type = uint32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Command = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 64
                }
            }
        }
        +SDNSubWaveforms = {
            Class = SDN::SDNSubscriber
            Topic = ECPC2SSCUJAWF
            Interface = lo
            CPUs = 0x2
            Locked = 1
            Signals = {
                Header = {
                     Type = uint8
                     NumberOfElements = 48
                }
                ESDNHeaderVersionId = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNHeaderSize = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNStatus = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNDoNotUse = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNTime = {
                    Type = uint32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                WaveformID = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1CorrectionCoilsCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron1FilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1SCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron1BPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1APSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2CorrectionCoilsCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron2FilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2SCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron2BPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2APSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
            }
        }
        /*+SDNPubReply = {
            Class = SDN::SDNPublisher
            Topic = SCURU2ECPC
            Interface = lo
            Locked = 1
            Signals = {
                Header = {
                     Type = uint8
                     NumberOfElements = 48
                }
                ESDNHeaderVersionId = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNHeaderSize = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNStatus = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNDoNotUse = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ESDNTime = {
                    Type = uint32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ReplyStatus = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                ReplyWaveformAck = {
                    Type = uint16
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusOverall = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusMagnets = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusFilament = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusHVPS = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1StatusAuxiliaries = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1AlarmCutoff  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1AlarmArcs  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1AlarmOvercurrent  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageVacuum  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageCollector = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageCooling = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1PercentageCathode = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusOverall = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusMagnets = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusFilament = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusHVPS = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2StatusAuxiliaries = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2AlarmCutoff  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2AlarmArcs  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2AlarmOvercurrent  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageVacuum  = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageCollector = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageCooling = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2PercentageCathode = {
                    Type = uint8
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsPowerEstimation = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsPowerConsumption = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsMVPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsBPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsAPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsFilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsSCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron1MeasurementsCollectorSweepingCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron1MeasurementsMVPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsBPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsAPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron1MeasurementsFilamentVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsPowerEstimation = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsPowerConsumption = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsMVPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsBPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsAPSCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsFilamentCurrent = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsSCMCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 4
                }
                Gyrotron2MeasurementsCollectorSweepingCurrents = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 2
                }
                Gyrotron2MeasurementsMVPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsBPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsAPSVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
                }
                Gyrotron2MeasurementsFilamentVoltage = {
                    Type = float32
                    NumberOfDimensions = 1
                    NumberOfElements = 1
               }
            }
        }*/
        +Display = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
    }
    +States = {
        Class = ReferenceContainer
        +WaitStandby = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /* Add GAMs to be executed.*/
                    Functions = {TimerGAM PreProgrammedGAM WaitStandbyMessageGAM ErrorDetectGAM }
                    CPUMask = 0x1
                }
            }
        }
        +Offline = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  RTApp Offline state check operation parameter changes.
                    *  When PLC SM becomes STANDBY State, PCF SM starts Coil Power Supplies Setup.
                    *  If Coil Power Supplies is ready, Move to WaitPermit state.
                    */
                    Functions = {TimerGAM PreProgrammedGAM OfflineMessageGAM ErrorDetectGAM }
                    CPUMask = 0x1
                }
            }
        }
        +WaitPermit = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  In the WatiPermit state, it is possible to change PrePro parameters.
                    */
                    Functions = {TimerGAM PreProgrammedGAM WaitPermitMessageGAMToPreHeating WaitPermitMessageGAMToWaitReady ErrorDetectGAM }
                    CPUMask = 0x1
                }
            }
        }        
        +PreHeating = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  If PrePro == ON, then, start PrePro Sequence. Oherwise, pass through this state.
                    */
                    Functions = {PreHeatingInitialValueGAM TimerGAM PreProgrammedGAM PreHeatingMessageGAM ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }
        +WaitReady = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  Check componets ready signals. All signals are ready, then move to WaitHVON state.
                    */
                    Functions = {WaitReadyInitialValueGAM TimerGAM WaitReadyMessageGAM ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }
        +WaitHVON = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  Wait one trigger (HVON). 
                    */
                    Functions = {WaitHVONInitialValueGAM TimerGAM WaitHVONMessageGAM ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }
        +HVArming = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  When Enter this state, turn on APS and BPS HVON.
                    *  When both HVPS are ON, move to HVArmed state.
                    */
                    Functions = {HVArmingInitialValueGAM TimerGAM HVArmingMessageGAM HVArmingCountdownGAM1 HVArmingCountdownGAM2 ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }
        +HVArmed = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  Wait until MHVPS is enabled or BPS SW is ON.
                    */
                    Functions = {HVArmedInitialValueGAM TimerGAM HVArmedMessageGAM1 HVArmedMessageGAM2 HVArmedCountdownGAM1 HVArmedCountdownGAM2 ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }
        +HVInjectionBPS = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  Wait until APS ON.
                    *  
                    */
                    Functions = {HVInjectionBPSInitialValueGAM TimerGAM HVInjectionMHVPSCountdownGAM HVInjectionAPSCountdownGAM HVInjectionMessageGAM ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }
        +HVInjectionMHVPS = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  Wait until APS ON.
                    *  
                    */
                    Functions = {HVInjectionMHVPSInitialValueGAM TimerGAM HVInjectionBPSCountdownGAM HVInjectionAPSCountdownGAM HVInjectionMessageGAM ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }

        +RFON = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    /*
                    *  Wait until Shot Length. When it takes shotlen time, move to HVArmed state.
                    */
                    Functions = {RFONInitialValueGAM TimerGAM RFONCountdownGAM1 RFONCountdownGAM2 RFONCountdownGAM3 RFONMessageGAM ErrorDetectGAM EPICSOutputGAM}
                    CPUMask = 0x1
                }
            }
        }
        
        +Error = {
        	Class = RealTimeState
        	+Threads = {
        		Class = ReferenceContainer
        		+Thread1 = {
        			Class = RealTimeThread
        			Functions = {ErrorInitialValueGAM StopPSGAM ResetErrorGAM EPICSOutputGAM}
        			CPUMask = 0x1
        		}
        	}
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
